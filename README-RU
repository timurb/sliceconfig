SliceConfig: Описание
=============================

                    Общее описание SliceConfig.

Сервера могут быть нескольких типов:

  * базовый сервер;
  * mysql сервер;
  * web сервер для RoR;
  * web сервер для PHP.

Настройка каждого типа сервера базируется на общих
принципах конфигурирования. Различные виды серверов получаются путем
добавления необходимых частей.

Исходный код располагается в git репозитории
git@github.com:fs/sliceconfig.git

SliceConfig содержит каталоги:

  * config - набор стандартных конфигурационных файлов;
  * install - скрипты для установки и настройки необходимого
    вида сервера;
  * security - скрипты для установки прав доступа к
    сервисам и файлам, настройка безопасности ситемы.

При установке на сервер SliceConfig должен располагаться
в каталоге /etc/sliceconfig.

Файлы, для которых не должно быть публичного
доступа (ключи, файлы .htpasswd и т.д.)
должны быть расположены на другом сервере в
отдельном архиве .tar.bz2, доступ к которому осуществляется
по ssh

Общий набор конфигов.

Каталог содержит конфиги, которые в последующем будут
применяться при настройке сервисов на сервере.

Установка конфигов осуществляется при помощи скриптов из
каталога install/scripts.

При установке оригинальные конфиги сервисов автоматически переименовываются
в вид filename-YYYY-MM-DD-HH:MM. Если используются
оригинальные файлы из поставки sliceconfig, они
должны быть прописаны символическими ссылками в необходимый
каталог. При изменении этих файлов, желательно
убрать симлинк, и сделать обычную копию.

Система бекапов.

Система представляет собой набор скриптов и конфигов
для резервного копирования файлов.

Бекапы построены на базе rdup, AutoMySQLBackup
и s3sync:

  * rdup осуществляет ежечасный бекап критичных файлов системы
    в каталог /var/backups/files
  * AutoMySQLBackup осуществляет бекап mysql базы в
    каталог /var/backups/mysql, если установлен mysql стек
  * s3sync осуществляет копирование /var/backups/mirror на Amazon S3

Система мониторинга.

Система представляет собой набор скриптов и конфигов
для мониторинга критичных процессов на серверах.

Мониторинг построен на базе monit.

Monit следит за следующими показателями:

  * состояние системы ( свободная память, загрузка процессора )
  * состояние файловой системы ( свободное место )
  * состояние бекапов ( файлы, mysql, зеркалировование )
  * проверяет работоспособность сервисов (nginx/httpd, mysql, crond,
    sendmail, sshd, syslog)

На адрес CONFIG_ROOT_ADDRESS отсылаются сообщения
в случае, когда происходит событие:

  * connection: сооединение с каким либо сервисом
    не произошло или соединение было восстановлено
  * nonexist: какой либо процесс не работает
  * timeout: не было осуществлено какое либо
    соединение из-за ошибки timeout
  * resource: какой либо показатель системы превысил
    лимит или пришел в норму

Проверки сервера на наличие rootkits

Ежедневно осуществляется поиск на сервере rootkits при
помощи Rootkit Hunter

Общий root email

Вся почта приходящая пользователю root перенаправляется на
e-mail , указанный в переменной CONFIG_ROOT_ADDRESS

Cron задачи

Смещено время выполнения cron задач:

  * ежечасно: в 17 минут каждого часа
  * ежедневно: в 6:25 каждый день
  * еженедельно: в 6:47 каждое воскресенье
  * ежемесячно: в 6:52 каждый первый день месяца

Локаль

Устанавливается UTF-8 локаль

Фаервол

Фаервол настраивается таким образом, что извне доступны
только порты:

  * из переменной CONFIG_SSH_PORT - ssh
  * 80,443 - http,https
  * 21 - ftp

SSH

Доступ извне по SSH разрешен только пользователю admin.
Так же можно авторизоваться при помощи ключа
admin@tsweb.toa.
При указании CONFIG_ALLOW_ROOT_LOGIN=yes доступ открывается
и для пользователя root

SUDO

Пользователь admin может выполнять все команды без
пароля.

Пользователь admin

Добавлен пользователь admin для администрирования системы.

Yum

Для установки необходимых версий ruby lобавлен репозиторий
RubyWorks.

Версии пакетов можно залочивать при помощи yum
плагина versionlock

                   Установка

  * Клонировать репозитарий с sliceconfig
    git clone git@github.com:fs/sliceconfig.git
  * создать архив с деревом приватных данных (для примера)

 etc/
 etc/s3conf/
 etc/s3conf/s3config.yml
 etc/httpd/
 etc/httpd/conf.d/
 etc/httpd/conf.d/access.passwd.tpl
 etc/nginx/
 etc/nginx/htpasswd
 home/
 home/admin/
 home/admin/.tcshrc
 home/admin/.bashrc
 home/admin/.ssh/
 home/admin/.ssh/authorized_keys
 home/admin/.ssh/id_rsa
 home/admin/.ssh/id_rsa.pub
 home/admin/.ssh/known_hosts
 root/
 root/.ssh/
 root/.ssh/known_hosts

    Не все файлы являются обязательными. в
    /home/admin/.ssh/authorized_keys нужно добавить ключ,
    по которому будет авторизовываться пользователь admin
  * зайти в каталог с установщиком
    cd sliceconfig/install
  * Залить архив с sliceconfig на сервер
    sh upload.sh root@yourserver.com
  * Зайти на сервер и распаковать sliceconfig

 ssh root@yourserver.com
 tar xjvf sliceconfig*.tar.bz2 -C /etc
 cd /etc/sliceconfig/install

  * При необходимости изменить переменные (variables), и
    ОБЯЗАТЕЛЬНО указать файл с приватными данными
    vim etc.conf
  * запустить установку базового стека и следовать
    инструкциям
    sh install_base.sh
